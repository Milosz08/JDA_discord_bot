/*
 * Copyright (c) 2024 by JWizard
 * Originally developed by Mi≈Çosz Gilga <https://miloszgilga.pl>
 */
import java.time.LocalDateTime
import java.time.Year

plugins {
  alias libs.plugins.kotlinJvm
  alias libs.plugins.kotlinSerialization
  alias libs.plugins.kotlinSpring apply false
  alias libs.plugins.shadowJar apply false
  alias libs.plugins.dokka
}

static def getEnv(String name, Object defValue = '') {
  return System.getenv("JWIZARD_CORE_$name") ?: defValue.toString()
}

static def getPluginId(Provider<PluginDependency> accessor) {
  return accessor.get().pluginId
}

configurations.configureEach {
  exclude group: 'commons-logging', module: 'commons-logging'
}

allprojects {
  repositories {
    mavenCentral()
    maven { url = uri('https://m2.dv8tion.net/releases') }
    maven { url = uri('https://m2.chew.pro/releases') }
    maven { url = uri('https://m2.chew.pro/snapshots') }
    maven { url = uri('https://maven.lavalink.dev/snapshots') }
    maven { url = uri('https://maven.lavalink.dev/releases') }
    maven { url = uri('https://jitpack.io') }
    mavenLocal()
  }
  group = groupId
  version = version
}

subprojects {
  apply plugin: getPluginId(libs.plugins.kotlinJvm)
  apply plugin: getPluginId(libs.plugins.kotlinSpring)
  apply plugin: getPluginId(libs.plugins.dokka)

  if (project.name != initProjectName) {
    apply plugin: 'java-library'
  }

  java.sourceCompatibility = jvmVersion
  java.targetCompatibility = jvmVersion

  dependencies {
    implementation libs.kotlin
    implementation libs.kotlinReflect

    implementation libs.logbackCore
    implementation libs.logbackClassic
    implementation libs.slf4jApi
  }

  test {
    useJUnitPlatform()
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = jvmVersion.toString()
      freeCompilerArgs = [
        '-Xjsr305=strict'
      ]
    }
  }

  dokkaHtml {
    outputDirectory = file("${project.layout.buildDirectory}/docs/kdoc")
  }
}

project(":${initProjectName}") {
  apply plugin: getPluginId(libs.plugins.shadowJar)

  jar {
    manifest {
      attributes(
        'Main-Class': mainClass
      )
    }
  }

  shadowJar {
    archiveBaseName = 'jwizard-core'
    archiveClassifier = ''
    archiveVersion = ''
    destinationDirectory = file("$rootDir/.bin")
  }
}

dokkaHtmlMultiModule {
  outputDirectory = file("$projectDir/docs")
  def bannerUrl = file('.github/banner.png').absolutePath.replace("\\", "\\\\")
  def dokkaBaseConfiguration = """
      {
        "customAssets": [
          "$bannerUrl"
        ],
        "footerMessage": "&copy; ${Year.now().value} by JWizard. On $license license."
      }
    """
  pluginsMapConfiguration.set([
    "org.jetbrains.dokka.base.DokkaBase": dokkaBaseConfiguration
  ])
  includes.from(file("README-DOCS.md"))
}

clean {
  doLast {
    def binDir = file("$projectDir/.bin")
    if (binDir.exists()) {
      binDir.deleteDir()
    }
  }
}

tasks.register('shadowJar') {
  dependsOn ":$initProjectName:shadowJar"
}

tasks.register('createEnv') {
  def envFile = file("$projectDir/.bin/.env")
  if (envFile.exists()) {
    envFile.delete()
  }
  def currentDateTime = LocalDateTime.now()
  def values = [
    'VAULT_TOKEN'  : getEnv('VAULT_TOKEN'),
    'VAULT_SERVER' : getEnv('VAULT_SERVER'),
    'BUILD_VERSION': getEnv('BUILD_VERSION', 'DEVELOPMENT'),
    'BUILD_DATE'   : currentDateTime.toString(),
  ]
  def str = values
    .collect { key, value -> "JWIZARD_CORE_${key}=${value}" }
    .join('\n')
  envFile.write(str)
}
