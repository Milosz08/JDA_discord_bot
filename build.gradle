/*
 * Copyright (c) 2024 by JWizard
 * Originally developed by Mi≈Çosz Gilga <https://miloszgilga.pl>
 */
import java.time.LocalDateTime

buildscript {
  ext {
    // root project setup
    initProjectName = 'jwc-app'
    groupId = 'pl.jwizard'
    version = '1.0.0'
    // sc environment versions
    jvmVersion = JavaVersion.VERSION_17
    springVersion = '3.3.3'
    kotlinVersion = '2.0.20'
  }
}

plugins {
  id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
  id 'org.jetbrains.kotlin.plugin.spring' version "$kotlinVersion"
  id 'org.springframework.boot' version "$springVersion" apply false
  id 'io.spring.dependency-management' version '1.1.6'
  id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

ext.libs = [
  kotlin            : 'org.jetbrains.kotlin:kotlin-stdlib',
  kotlinReflect     : 'org.jetbrains.kotlin:kotlin-reflect',
  springBootDep     : "org.springframework.boot:spring-boot-dependencies:$springVersion",
  springBootStarter : 'org.springframework.boot:spring-boot-starter',
  springBootDevTools: 'org.springframework.boot:spring-boot-devtools',
  springBootJdbc    : 'org.springframework.boot:spring-boot-starter-data-jdbc',
  springVault       : 'org.springframework.cloud:spring-cloud-vault-config:4.1.3',
  dotEnv            : 'io.github.cdimascio:dotenv-java:2.2.0',
  slf4jApi          : 'org.slf4j:slf4j-api:2.0.16',
  mysqlConnector    : 'com.mysql:mysql-connector-j:8.4.0',
]

configurations.configureEach {
  exclude group: 'commons-logging', module: 'commons-logging'
}

allprojects {
  repositories {
    mavenCentral()
    maven { url = uri('https://m2.dv8tion.net/releases') }
    maven { url = uri('https://m2.chew.pro/releases') }
    maven { url = uri('https://m2.chew.pro/snapshots') }
    maven { url = uri('https://maven.lavalink.dev/snapshots') }
    maven { url = uri('https://maven.lavalink.dev/releases') }
    maven { url = uri('https://jitpack.io') }
  }
  group = groupId
  version = version
}

subprojects {
  apply plugin: 'org.jetbrains.kotlin.jvm'
  apply plugin: 'org.jetbrains.kotlin.plugin.spring'

  if (project.name != initProjectName) {
    apply plugin: 'java-library'
  }

  java.sourceCompatibility = jvmVersion
  java.targetCompatibility = jvmVersion

  dependencies {
    implementation libs.kotlin
    implementation libs.kotlinReflect
    compileOnly libs.slf4jApi
  }

  test {
    useJUnitPlatform()
  }

  tasks.compileKotlin {
    kotlinOptions {
      jvmTarget = jvmVersion.toString()
      freeCompilerArgs = [
        '-Xjsr305=strict'
      ]
    }
  }
}

project(":${initProjectName}") {
  apply plugin: 'org.springframework.boot'

  tasks.bootJar {
    destinationDirectory = file("$rootDir/.bin")
    archiveFileName = 'jwizard-core.jar'
  }
}

tasks.clean {
  doLast {
    def binDir = file("$projectDir/.bin")
    if (binDir.exists()) {
      binDir.deleteDir()
    }
  }
}

tasks.register('bootJar') {
  dependsOn ':jwc-app:bootJar'
}

static def getEnv(String name, Object defValue = '') {
  return System.getenv("JWIZARD_CORE_$name") ?: defValue.toString()
}

tasks.register('createEnv') {
  def envFile = file("$projectDir/.bin/.env")
  if (envFile.exists()) {
    envFile.delete()
  }
  def currentDateTime = LocalDateTime.now()
  def values = [
    'VAULT_TOKEN'  : getEnv('VAULT_TOKEN'),
    'VAULT_SERVER' : getEnv('VAULT_SERVER'),
    'BUILD_VERSION': getEnv('BUILD_VERSION', 'DEVELOPMENT'),
    'BUILD_DATE'   : currentDateTime.toString(),
  ]
  def str = values
    .collect { key, value -> "JWIZARD_CORE_${key}=${value}" }
    .join('\n')
  envFile.write(str)
}
