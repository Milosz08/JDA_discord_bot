/*
 * Copyright (c) 2023 by MILOSZ GILGA <http://miloszgilga.pl>
 *
 * File name: build.gradle
 * Last modified: 23/03/2023, 19:12
 * Project name: jwizard-discord-bot
 *
 * Licensed under the MIT license; you may not use this file except in compliance with the License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * THE ABOVE COPYRIGHT NOTICE AND THIS PERMISSION NOTICE SHALL BE INCLUDED IN ALL COPIES OR
 * SUBSTANTIAL PORTIONS OF THE SOFTWARE.
 *
 * The software is provided "as is", without warranty of any kind, express or implied, including but not limited
 * to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event
 * shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an
 * action of contract, tort or otherwise, arising from, out of or in connection with the software or the use
 * or other dealings in the software.
 */

plugins {
    id 'java'
    id 'application'
    alias libs.plugins.spring.boot.plugin
    alias libs.plugins.spring.dept.plugin
}

def props = new Properties()
file('src/main/resources/artifact.properties').withInputStream { props.load(it) }

allprojects {
    version         = props.getProperty("project.version")
    group           = 'pl.miloszgilga'
    mainClassName   = 'pl.miloszgilga.SpringBootRunner'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://m2.chew.pro/releases" }
        maven { url "https://m2.dv8tion.net/releases" }
        maven { url 'https://jitpack.io' }
    }

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    configurations {
        compileOnly.extendsFrom annotationProcessor
        textCompileOnly.extendsFrom annotationProcessor
        testAnnotationProcessor.extendsFrom annotationProcessor
    }

    test {
        useJUnitPlatform()
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        implementation      libs.lombok

        implementation      libs.commons.text
        implementation      libs.commons.validator

        annotationProcessor libs.lombok
        testImplementation  libs.junit.api
        testRuntimeOnly     libs.junit.engine
    }
}

// NOTE: all 3rd part libraries in /gradle/libs.versions.toml file
dependencies {
    implementation          libs.lombok

    implementation          libs.h2.driver
    implementation          libs.liquibase
    implementation          libs.mysql.driver

    implementation          libs.commons.text
    implementation          libs.commons.validator

    developmentOnly         libs.spring.boot.devtools
    implementation          libs.spring.boot.starter
    runtimeOnly             libs.spring.boot.starter.web
    implementation          libs.spring.boot.starter.cache
    runtimeOnly             libs.spring.boot.starter.security
    implementation          libs.spring.boot.starter.data.jpa
    runtimeOnly             libs.spring.boot.starter.validation

    implementation          libs.jda
    implementation          libs.lavaplayer
    implementation          libs.jdautilities

    implementation          libs.jmpsl.core
    runtimeOnly             libs.jmpsl.security

    implementation          libs.spring.vault
    implementation          libs.snakeyaml
    implementation          libs.dotenv
    implementation          libs.reflections
    implementation          libs.apache.httpclient
    runtimeOnly             libs.jjwt.api
    runtimeOnly             libs.jjwt.impl
    runtimeOnly             libs.jjwt.jackson
    implementation          libs.ehcache
    implementation          libs.jaxb.api
    implementation          libs.jaxb.impl

    annotationProcessor     libs.lombok
    testImplementation      libs.junit.api
    testRuntimeOnly         libs.junit.engine
    testImplementation      libs.spring.boot.starter.test

    implementation          project(':xm-jwizard-data-access')
    implementation          project(':xm-jwizard-web-api')
}

bootJar {
    archiveFileName = "${props.getProperty("project.artifact")}-${project.version}.jar"
    version =  project.version

    destinationDir(file("$rootDir/build/jar"))
    launchScript()
}

tasks.register("bootRunDev") {
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", 'dev')
        }
    }
    finalizedBy("bootRun")
}

tasks.register("bootRunProd") {
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", 'prod')
        }
    }
    finalizedBy("bootRun")
}

tasks.register('moveConfigurationFiles', Copy) {
    from layout.projectDirectory.files([
        'properties-dev.yml',
        'properties-prod.yml',
        'activities-splashes.txt',
        '.env'
    ])
    into layout.buildDirectory.dir("$rootDir/build/jar")
}

tasks.register('moveExecutableFiles', Copy) {
    from layout.projectDirectory.dir('run-scripts')
    into layout.buildDirectory.dir("$rootDir/build/jar")
}

tasks.register('moveGfxFiles', Copy) {
    from layout.projectDirectory.dir('gfx')
    exclude 'github-logo.png'
    into layout.buildDirectory.dir("$rootDir/build/jar/gfx")
}

bootJar.finalizedBy moveConfigurationFiles
bootJar.finalizedBy moveGfxFiles
bootJar.finalizedBy moveExecutableFiles
