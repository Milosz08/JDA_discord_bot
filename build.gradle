/*
 * Copyright (c) 2023 by MILOSZ GILGA <http://miloszgilga.pl>
 *
 * File name: build.gradle
 * Last modified: 22/02/2023, 17:00
 * Project name: jwizard-discord-bot
 *
 * Licensed under the MIT license; you may not use this file except in compliance with the License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * THE ABOVE COPYRIGHT NOTICE AND THIS PERMISSION NOTICE SHALL BE INCLUDED IN ALL
 * COPIES OR SUBSTANTIAL PORTIONS OF THE SOFTWARE.
 */

plugins {
    id 'java'
    id 'application'
    alias libs.plugins.shadow.packager
}

def props = new Properties()
file('src/main/resources/artifact.properties').withInputStream { props.load(it) }

version         = props.getProperty("project.version")
group           = 'pl.miloszgilga'
mainClassName   = 'pl.miloszgilga.Bootloader'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://m2.dv8tion.net/releases' }
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

// NOTE: all 3rd part libraries in /gradle/libs.version.toml file

dependencies {
    implementation      libs.jda
    implementation      libs.lavaplayer
    implementation      libs.jdautilities

    implementation      libs.mysql.driver
    implementation      libs.hibernate
    implementation      libs.c3p0pools
    implementation      libs.liquibase

    implementation      libs.lombok
    implementation      libs.log4j.core
    implementation      libs.log4j.api
    implementation      libs.log4j.slf4j
    implementation      libs.spring.context
    implementation      libs.spring.vault
    implementation      libs.snakeyaml
    implementation      libs.commons.text
    implementation      libs.commons.validator
    implementation      libs.commons.cli
    implementation      libs.dotenv
    implementation      libs.reflections
    implementation      libs.apache.httpclient

    annotationProcessor libs.lombok
    testImplementation  libs.junit.api
    testRuntimeOnly     libs.junit.engine
}

configurations.all {
    exclude module: 'logback-classic'
}

shadowJar {
    archiveFileName = "${props.getProperty("project.artifact")}-${project.version}.jar"
    manifest {
        attributes  'Main-Class':           project.mainClassName,
                    'Specification-Title':  props.getProperty("project.name"),
                    'Description':          props.getProperty("project.description"),
                    'Multi-Release':        true
    }
    exclude(
        '**/DEPENDENCIES*',
        '**/LICENSE*',
        '**/README*',
        '**/AUTHORS*',
        'changelog.txt',
        'release-timestamp.txt',
        'opus-java*.pom',
        '**/*.html',
        'META-INF/NOTICE*'
    )
    destinationDir(file("$rootDir/build/shadow"))
}

tasks.register('moveConfigurationFiles', Copy) {
    from layout.projectDirectory.files([
        'properties-dev.yml',
        'properties-prod.yml',
        'fancy-title.txt',
        'activities-splashes.txt',
        '.env'
    ])
    into layout.buildDirectory.dir("$rootDir/build/shadow")
}

tasks.register('moveExecutableFiles', Copy) {
    from layout.projectDirectory.dir('run-scripts')
    into layout.buildDirectory.dir("$rootDir/build/shadow")
}

tasks.register('moveLangFiles', Copy) {
    from layout.projectDirectory.dir('lang')
    into layout.buildDirectory.dir("$rootDir/build/shadow/lang")
}

tasks.register('moveGfxFiles', Copy) {
    from layout.projectDirectory.dir('gfx')
    into layout.buildDirectory.dir("$rootDir/build/shadow/gfx")
}

shadowJar.finalizedBy moveConfigurationFiles
shadowJar.finalizedBy moveLangFiles
shadowJar.finalizedBy moveGfxFiles
shadowJar.finalizedBy moveExecutableFiles

test {
    useJUnitPlatform()
}
