/*
 * Copyright (c) 2024 by JWizard
 * Originally developed by Miłosz Gilga <https://miloszgilga.pl>
 */
package pl.jwizard.jwc.api

import net.dv8tion.jda.api.entities.MessageEmbed
import net.dv8tion.jda.api.interactions.components.buttons.Button
import pl.jwizard.jwc.command.interaction.component.Paginator
import pl.jwizard.jwc.command.interaction.component.RefreshableComponent
import pl.jwizard.jwc.command.interaction.component.RefreshableContent
import pl.jwizard.jwc.core.i18n.source.I18nActionSource
import pl.jwizard.jwc.core.jda.command.CommandBaseContext
import pl.jwizard.jwc.core.jda.embed.MessageEmbedBuilder
import pl.jwizard.jwc.core.property.BotListProperty
import pl.jwizard.jwc.core.property.BotProperty
import pl.jwizard.jwl.property.AppProperty

/**
 * Base class for commands that provides common functionalities.
 *
 * @property commandEnvironment The environment dependencies required for command execution.
 * @author Miłosz Gilga
 */
abstract class CommandBase(protected val commandEnvironment: CommandEnvironmentBean) {

	protected val environment = commandEnvironment.environment
	protected val guildSettingsEventAction = commandEnvironment.guildSettingsEventAction
	protected val i18n = commandEnvironment.i18n
	protected val jdaShardManager = commandEnvironment.jdaShardManager
	protected val exceptionTrackerHandler = commandEnvironment.exceptionTrackerHandler
	protected val botEmojisCache = commandEnvironment.botEmojisCache

	/**
	 * A list of permissions assigned to superusers.
	 *
	 * @see BotListProperty.JDA_SUPERUSER_PERMISSIONS
	 */
	protected val superuserPermissions =
		environment.getListProperty<String>(BotListProperty.JDA_SUPERUSER_PERMISSIONS)

	/**
	 * Creates a message embed builder configured with the given command context.
	 *
	 * @param context The context of the command execution.
	 * @return A configured MessageEmbedBuilder instance.
	 */
	protected fun createEmbedMessage(context: CommandBaseContext) =
		MessageEmbedBuilder(i18n, commandEnvironment.jdaColorStore, context)

	/**
	 * Creates a paginator for displaying multiple pages of content.
	 *
	 * @param context The context of the command execution.
	 * @param pages The list of pages to be included in the paginator.
	 * @return A Paginator instance that handles pagination logic.
	 */
	protected fun createPaginator(context: CommandBaseContext, pages: List<MessageEmbed>) =
		Paginator(context, i18n, commandEnvironment.eventQueue, commandEnvironment.jdaColorStore, pages, botEmojisCache)

	/**
	 * Creates a refreshable component, which allows dynamic content to be refreshed during its lifecycle by pressing
	 * a button.
	 *
	 * @param T The type of content to refresh.
	 * @param refer The refreshable content that can be updated.
	 * @param payload The actual data to be used for refreshing the content.
	 * @return A [RefreshableComponent] that handles dynamic content updates.
	 */
	protected fun <T> createRefreshable(refer: RefreshableContent<T>, payload: T) =
		RefreshableComponent(i18n, commandEnvironment.eventQueue, refer, payload, botEmojisCache)

	/**
	 * Creates a URL link by formatting a base URL with the provided fragment value. This is typically used to generate
	 * URLs for specific sections of a website based on predefined fragments.
	 *
	 * @param fragment The fragment that will be used to complete the URL.
	 * @param args Additional arguments used in [format] function.
	 * @return A string representing the full URL generated by combining the base URL with the fragment.
	 */
	protected fun createLinkFromFragment(fragment: AppProperty, vararg args: Any?): String {
		val baseUrl = environment.getProperty<String>(BotProperty.LINK_WEBSITE)
		val fragmentUrl = environment.getProperty<String>(fragment)
		return fragmentUrl.format(baseUrl, *args)
	}

	/**
	 * Creates a link button that points to a specific URL. This button can be used in Discord messages to allow users to
	 * click and open a URL in their browser.
	 *
	 * @param name The name of the button, used for localization.
	 * @param link The link to associate with the button.
	 * @param context The command context, used to retrieve the language for localization.
	 * @return A [Button] that links to the specified URL with the appropriate localized text.
	 */
	protected fun createLinkButton(name: I18nActionSource, link: AppProperty, context: CommandBaseContext) =
		createLinkButton(name, environment.getProperty<String>(link), context)

	/**
	 * Creates a link button that points to a specific URL. This button can be used in Discord messages to allow users to
	 * click and open a URL in their browser.
	 *
	 * @param name The name of the button, used for localization.
	 * @param link The URL to associate with the button.
	 * @param context The command context, used to retrieve the language for localization.
	 * @return A [Button] that links to the specified URL with the appropriate localized text.
	 */
	private fun createLinkButton(name: I18nActionSource, link: String, context: CommandBaseContext) =
		Button.link(link, i18n.t(name, context.language))
}
