/*
 * Copyright (c) 2024 by JWizard
 * Originally developed by Miłosz Gilga <https://miloszgilga.pl>
 */
package pl.jwizard.jwc.core.properties

import kotlin.reflect.KType
import kotlin.reflect.typeOf

/**
 * Configuration properties defined by hierarchical various sources [PropertySource] lists.
 *
 * @property key property key in various source(s) defined as [sources] property,
 * @property sources hierarchical list of property sources (from most to less significant). Default source: *file*.
 * @author Miłosz Gilga
 */
enum class BotProperty(
	private val key: String,
	private val type: KType,
	private val sources: List<PropertySource>,
) {

	/**
	 * Application runtime mode. Defined all others configurations and Spring Context loaders. Sources: *command line
	 * arguments*. Accepted: *dev*, *prod*. Default: *dev*.
	 */
	RUNTIME_MODE("runtime.mode", PropertySource.ARG),

	/**
	 * Deployment build version. Generated by CI/CD pipeline. Default value: *UNKNOWN*.
	 */
	DEPLOYMENT_BUILD_VERSION("deployment.build-version"),

	/**
	 * Deployment last build date. Generated by CI/CD pipeline. Default value: *UNKNOWN*.
	 */
	DEPLOYMENT_LAST_BUILD_DATE("deployment.last-build-date"),

	/**
	 * Database JDBC url provider. Sources: *file*.
	 */
	DB_URL("db.jdbc"),

	/**
	 * Database username. Sources: *file*.
	 */
	DB_USERNAME("db.username"),

	/**
	 * Database password. Sources: *file*.
	 */
	DB_PASSWORD("db.password"),

	/**
	 * Vault key storage url. Sources: *file*.
	 */
	VAULT_URL("vault.url"),

	/**
	 * Vault key storage access token. Sources: *file*.
	 */
	VAULT_TOKEN("vault.token"),

	/**
	 * Vault key storage KV backend name. Sources: *file*.
	 */
	VAULT_KV_BACKEND("vault.kv.backend"),

	/**
	 * Vault key storage KV default context. Load default secrets independently of application name. Sources: *file*.
	 */
	VAULT_KV_DEFAULT_CONTEXT("vault.kv.default-context"),

	/**
	 * Vault key storage KV application name. Load all secrets from this pre-path. Sources: *file*.
	 */
	VAULT_KV_APPLICATION_NAME("vault.kv.application-name"),

	/**
	 * JDA instance name. Sources: *file*.
	 */
	JDA_NAME("jda.name"),

	/**
	 * JDA instance icon path. Sources: *file*.
	 */
	JDA_ICON_PATH("jda.icon-path"),

	/**
	 * JDA secret token. Sources: *file*.
	 */
	JDA_SECRET_TOKEN("jda.secret-token"),

	/**
	 * Max elements per page number for JDA pagination generator.
	 */
	JDA_PAGINATION_MAX_ELEMENTS_PER_PAGE("jda.pagination.max-elements-per-page", typeOf<Int>()),

	/**
	 * JDA pagination generator menu visibility in seconds.
	 */
	JDA_PAGINATION_MENU_ALIVE("jda.pagination.menu-alive-sec", typeOf<Int>()),

	/**
	 * JDA splashes toggle boolean property. If true, splashes are enabled, otherwise show nothing. Sources: *file*.
	 */
	JDA_SPLASHES_ENABLED("jda.splashes.enabled", typeOf<Boolean>()),

	/**
	 * JDA splashes interval in seconds. Sources: *file*.
	 */
	JDA_SPLASHES_INTERVAL("jda.splashes.interval-sec", typeOf<Int>()),

	/**
	 * JDA splashes elements show in sequentially order.
	 */
	JDA_SPLASHES_ELEMENTS("jda.splashes.elements", typeOf<List<String>>()),

	/**
	 * JWizard API service host url. Sources: *file*.
	 */
	SERVICE_API_URL("service.api-url"),

	/**
	 * JWizard Content Delivery Network service host url. Sources: *file*.
	 */
	SERVICE_CDN_URL("service.cdn-url"),

	/**
	 * I18n default language (as language tag, without localization property). Sources: *file*.
	 */
	I18N_DEFAULT_LANGUAGE("i18n.default-language"),

	/**
	 * I18n resources template taking from Content Delivery Network. This template require `lang` parameter in template
	 * string, ex. /resource/${lang}-message.properties. Sources: *file*.
	 */
	I18N_CDN_RESOURCE_TEMPLATE("i18n.cdn-resource-template"),

	/**
	 * I18n locale resources elements list. Loaded from classpath. Must be ends with messages, ex. config/messages.
	 * Sources: *file*.
	 */
	I18N_LOCALE_RESOURCES("i18n.locale-resources", typeOf<List<String>>()),
	;

	/**
	 * Constructor for property with single selected source and property type as String. Sources: *file*.
	 */
	constructor(key: String, sources: PropertySource) : this(key, typeOf<String>(), listOf(sources))

	/**
	 * Constructor for property with one source: *file* and property type as String.
	 */
	constructor(key: String) : this(key, typeOf<String>(), listOf(PropertySource.FILE))

	/**
	 * Constructor for property with one source: *file* and selected property type.
	 */
	constructor(key: String, type: KType) : this(key, type, listOf(PropertySource.FILE))
}
